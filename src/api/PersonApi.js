/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Person from '../model/Person';

/**
* Person service.
* @module api/PersonApi
* @version 1.0.0
*/
export default class PersonApi {

    /**
    * Constructs a new PersonApi. 
    * @alias module:api/PersonApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createperson operation.
     * @callback module:api/PersonApi~createpersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Person} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Person} person data to be created
     * @param {module:api/PersonApi~createpersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Person}
     */
    createperson(person, callback) {
      let postBody = person;
      // verify the required parameter 'person' is set
      if (person === undefined || person === null) {
        throw new Error("Missing the required parameter 'person' when calling createperson");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Person;
      return this.apiClient.callApi(
        '/person', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteperson operation.
     * @callback module:api/PersonApi~deletepersonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} personId the Id parameter
     * @param {module:api/PersonApi~deletepersonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteperson(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling deleteperson");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/person/{personId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllperson operation.
     * @callback module:api/PersonApi~getAllpersonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Person>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/PersonApi~getAllpersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Person>}
     */
    getAllperson(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Person];
      return this.apiClient.callApi(
        '/person/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsperson operation.
     * @callback module:api/PersonApi~getByParamspersonCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Person>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/PersonApi~getByParamspersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Person>}
     */
    getByParamsperson(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsperson");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Person];
      return this.apiClient.callApi(
        '/person/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getperson operation.
     * @callback module:api/PersonApi~getpersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Person} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} personId the Id parameter
     * @param {module:api/PersonApi~getpersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Person}
     */
    getperson(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling getperson");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Person;
      return this.apiClient.callApi(
        '/person/{personId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateperson operation.
     * @callback module:api/PersonApi~updatepersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Person} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} personId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Person} opts.person data to be updated
     * @param {module:api/PersonApi~updatepersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Person}
     */
    updateperson(personId, opts, callback) {
      opts = opts || {};
      let postBody = opts['person'];
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling updateperson");
      }

      let pathParams = {
        'personId': personId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Person;
      return this.apiClient.callApi(
        '/person/{personId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
